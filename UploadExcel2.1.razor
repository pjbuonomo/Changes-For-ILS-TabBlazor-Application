@page "/excel-upload"
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml
@using System.Data
@using System.IO
@using System.Linq
@using System.Text.RegularExpressions

<div>
    <InputFile OnChange="HandleFileSelected" multiple />
    @if (!string.IsNullOrEmpty(fileTypeMessage))
    {
        <div class="mt-2">@fileTypeMessage</div>
    }
</div>

@if (dataTable != null)
{
    <div class="card">
        <table class="table mt-3">
            <thead>
                <tr>
                    @foreach (DataColumn col in dataTable.Columns)
                    {
                        <th>@col.ColumnName</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (DataRow row in dataTable.Rows)
                {
                    <tr>
                        @foreach (var cell in row.ItemArray)
                        {
                            <td>@cell</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private DataTable? dataTable;
    private string fileTypeMessage = string.Empty;
    private string fileType = string.Empty;
    private string quoteDate = string.Empty;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            IdentifyFileTypeAndQuoteDate(file.Name);

            if (!string.IsNullOrEmpty(fileType))
            {
                fileTypeMessage = $"File Type Identified: {fileType}";
                var fileStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(fileStream);
                await ProcessFile(fileStream);
                break; // Assuming one file processing at a time for simplicity
            }
        }
    }

    private void IdentifyFileTypeAndQuoteDate(string fileName)
    {
        if (Regex.IsMatch(fileName, "RLS|ILW", RegexOptions.IgnoreCase))
        {
            fileType = "AON";
            var match = Regex.Match(fileName, @"\d{4}-\d{2}-\d{2}");
            if (match.Success) quoteDate = match.Value;
        }
        else if (fileName.Contains("ILS pricing data", StringComparison.OrdinalIgnoreCase))
        {
            fileType = "Swiss";
            var match = Regex.Match(fileName, @"\d{8}");
            if (match.Success) quoteDate = $"{match.Value.Substring(0, 4)}-{match.Value.Substring(4, 2)}-{match.Value.Substring(6, 2)}";
        }
        else
        {
            fileType = string.Empty;
            quoteDate = string.Empty;
        }
    }

    private async Task ProcessFile(MemoryStream fileStream)
    {
        fileStream.Position = 0; // Reset stream position to the beginning
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set according to your use case
        using var package = new ExcelPackage(fileStream);
        var worksheet = package.Workbook.Worksheets.FirstOrDefault(ws => ws.Name.Equals("RLS", StringComparison.OrdinalIgnoreCase)) ?? package.Workbook.Worksheets[0];

        if (fileType == "AON")
        {
            // AON specific processing
            ProcessAonFile(worksheet);
        }
        else if (fileType == "Swiss")
        {
            // Swiss specific processing adapted from the original logic
            ProcessSwissFile(worksheet);
        }

        fileStream.Dispose(); // Clean up the MemoryStream
    }

private async Task ProcessAonFile(ExcelWorksheet worksheet)
{
    var headerRow = 4; // Headers are located in row 4
    var dataStartRow = 6; // Data starts from row 6, after a blank row
    var startColumn = 3; // Data starts from column 3, skipping columns 1 and 2

    dataTable = new DataTable();

    // First, ensure the "QuoteDate" column is added to the DataTable
    dataTable.Columns.Add("QuoteDate", typeof(string));

    // Define a list to keep track of valid (non-empty) column indices
    List<int> validColumns = new List<int>();

    // Populate DataTable columns based on row 4 headers, skipping empty headers
    for (int col = startColumn; col <= worksheet.Dimension.End.Column; col++)
    {
        var header = worksheet.Cells[headerRow, col].Text.Trim();
        if (!string.IsNullOrEmpty(header))
        {
            dataTable.Columns.Add(header); // Add column to DataTable
            validColumns.Add(col); // This column index is valid since it has a header
        }
    }

    // Process each row, starting from where actual data begins
    for (int row = dataStartRow; row <= worksheet.Dimension.End.Row; row++)
    {
        var dataRow = dataTable.NewRow();
        bool rowHasData = false;

        // Set "QuoteDate" for each row
        dataRow["QuoteDate"] = quoteDate;

        // Iterate through the valid columns to populate the row
        for (int i = 0; i < validColumns.Count; i++)
        {
            var cellValue = worksheet.Cells[row, validColumns[i]].Text.Trim();
            // DataColumn index needs to be offset by 1 due to the addition of "QuoteDate" at the beginning
            dataRow[i + 1] = cellValue;

            if (!string.IsNullOrEmpty(cellValue))
            {
                rowHasData = true; // This row contains data
            }
        }

        // Only add the row to the dataTable if it contains data
        if (rowHasData)
        {
            dataTable.Rows.Add(dataRow);
        }
    }

    // After processing, dataTable contains all the rows with data from the worksheet,
    // and each row has the "QuoteDate" filled in.
}





    private void ProcessSwissFile(ExcelWorksheet worksheet)
    {
        // Adapted Swiss processing logic from the original code
        int startRow = 13; // Example for 'Swiss', skipping 12 rows as per original logic
        dataTable = worksheet.Cells[startRow, 3, worksheet.Dimension.End.Row, worksheet.Dimension.End.Column].ToDataTable(options =>
        {
            options.FirstRowIsColumnNames = true;
            // Implement additional logic as needed to skip empty columns and fill every entry of Quote Date with the value from the file name
        });
        // Fill QuoteDate for every entry as needed
    }
}
