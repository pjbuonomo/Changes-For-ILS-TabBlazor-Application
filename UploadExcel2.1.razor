@page "/excel-upload"
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml
@using System.Data
@using System.IO
@using System.Linq

<InputFile OnChange="HandleFileSelected" multiple />

@if (!string.IsNullOrEmpty(fileType))
{
    <p>File Type Identified: @fileType</p>
}

@if (dataTables != null && dataTables.Any())
{
    @foreach (var dataTable in dataTables)
    {
        <div class="card">
            <table class="table mt-3">
                <thead>
                    <tr>
                        @foreach (DataColumn col in dataTable.Columns)
                        {
                            <th>@col.ColumnName</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (DataRow row in dataTable.Rows)
                    {
                        <tr>
                            @foreach (var cell in row.ItemArray)
                            {
                                <td>@cell</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

<button class="btn btn-primary mt-2" @onclick="ProcessFiles">Process</button>

@code {
    private List<MemoryStream> fileStreams = new();
    private List<DataTable>? dataTables;
    private string fileType = "";

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            MemoryStream memoryStream = new();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            fileStreams.Add(memoryStream);

            // Identify file type based on file name
            if (file.Name.Contains("RLS") || file.Name.Contains("ILW"))
            {
                fileType = "AON";
            }
            // Additional file types can be added here
        }
    }

    private void ProcessFiles()
    {
        dataTables = new List<DataTable>();

        foreach (var fileStream in fileStreams)
        {
            fileStream.Position = 0; // Reset stream position to beginning
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using var package = new ExcelPackage(fileStream);
            ExcelWorksheet worksheet;

            switch (fileType)
            {
                case "AON":
                    worksheet = package.Workbook.Worksheets["RLS"]; // Target sheet
                    var dataTable = ProcessAonWorksheet(worksheet);
                    dataTables.Add(dataTable);
                    break;
                // Additional cases for other file types
            }
        }

        // Clear file streams after processing
        fileStreams.ForEach(fs => fs.Dispose());
        fileStreams.Clear();
    }

    private DataTable ProcessAonWorksheet(ExcelWorksheet worksheet)
    {
        DataTable dataTable = new();

        // Implement logic to skip rows/columns as per AON requirements
        // This is a simplified version and needs to be adapted based on actual Excel structure
        var startRow = 4; // Row 4 contains headers
        var endRow = worksheet.Dimension.End.Row;
        var startColumn = 3; // Columns 1 and 2 are skipped

        // Assume all columns in Row 4 up to the last column with a header are needed
        var endColumn = worksheet.Dimension.End.Column;
        for (int col = startColumn; col <= endColumn; col++)
        {
            if (!string.IsNullOrWhiteSpace(worksheet.Cells[4, col].Text))
            {
                dataTable.Columns.Add(worksheet.Cells[4, col].Text);
            }
        }

        // Process rows, starting from row 5 (since row 4 is headers)
        for (int row = 5; row <= endRow; row++)
        {
            var dataRow = dataTable.NewRow();
            int dataIndex = 0;
            for (int col = startColumn; col <= endColumn; col++)
            {
                if (!string.IsNullOrWhiteSpace(worksheet.Cells[4, col].Text)) // Check if column has header
                {
                    dataRow[dataIndex++] = worksheet.Cells[row, col].Text;
                }
            }
            dataTable.Rows.Add(dataRow);
        }

        return dataTable;
    }
}
