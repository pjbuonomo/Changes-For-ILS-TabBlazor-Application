@page "/excel-upload"
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml
@using System.Data
@using System.IO
@using System.Linq
@using System.Text.RegularExpressions

<div>
    <InputFile OnChange="HandleFileSelected" multiple />
    @if (!string.IsNullOrEmpty(fileTypeMessage))
    {
        <div class="mt-2">@fileTypeMessage</div>
    }
</div>

@if (dataTable != null)
{
    <div class="card">
        <table class="table mt-3">
            <thead>
                <tr>
                    @foreach (DataColumn col in dataTable.Columns)
                    {
                        <th>@col.ColumnName</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (DataRow row in dataTable.Rows)
                {
                    <tr>
                        @foreach (var cell in row.ItemArray)
                        {
                            <td>@cell</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private DataTable? dataTable;
    private string fileTypeMessage = string.Empty;
    private string fileType = string.Empty;
    private string quoteDate = string.Empty;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            IdentifyFileTypeAndQuoteDate(file.Name);

            if (!string.IsNullOrEmpty(fileType))
            {
                fileTypeMessage = $"File Type Identified: {fileType}";
                var fileStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(fileStream);
                await ProcessFile(fileStream);
                break; // Assuming one file processing at a time for simplicity
            }
        }
    }

    private void IdentifyFileTypeAndQuoteDate(string fileName)
    {
        if (Regex.IsMatch(fileName, "RLS|ILW", RegexOptions.IgnoreCase))
        {
            fileType = "AON";
            var match = Regex.Match(fileName, @"\d{4}-\d{2}-\d{2}");
            if (match.Success) quoteDate = match.Value;
        }
        else if (fileName.Contains("ILS pricing data", StringComparison.OrdinalIgnoreCase))
        {
            fileType = "Swiss";
            var match = Regex.Match(fileName, @"\d{8}");
            if (match.Success) quoteDate = $"{match.Value.Substring(0, 4)}-{match.Value.Substring(4, 2)}-{match.Value.Substring(6, 2)}";
        }
        else
        {
            fileType = string.Empty;
            quoteDate = string.Empty;
        }
    }

    private async Task ProcessFile(MemoryStream fileStream)
    {
        fileStream.Position = 0; // Reset stream position to the beginning
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set according to your use case
        using var package = new ExcelPackage(fileStream);
        var worksheet = package.Workbook.Worksheets.FirstOrDefault(ws => ws.Name.Equals("RLS", StringComparison.OrdinalIgnoreCase)) ?? package.Workbook.Worksheets[0];

        if (fileType == "AON")
        {
            // AON specific processing
            ProcessAonFile(worksheet);
        }
        else if (fileType == "Swiss")
        {
            // Swiss specific processing adapted from the original logic
            ProcessSwissFile(worksheet);
        }

        fileStream.Dispose(); // Clean up the MemoryStream
    }

private void ProcessAonFile(ExcelWorksheet worksheet)
{
    dataTable = new DataTable();
    var headerRow = 4; // Row 4 contains the headers.
    var dataStartRow = 6; // Actual data starts from row 6.
    var startColumn = 3; // Starting from column 3 because columns 1 and 2 are to be ignored.

    // Manually add the "QuoteDate" column as the first column in the DataTable.
    dataTable.Columns.Add("QuoteDate", typeof(string));

    // Initialize a dictionary to map original column names to their new names if they need to be renamed.
    Dictionary<string, string> columnNames = new Dictionary<string, string>();
    int apCount = 0, elCount = 0, bidCount = 0, offerCount = 0;

    // Add columns based on headers present in the Excel sheet from the startColumn index,
    // applying the renaming rules for duplicates.
    for (int col = startColumn; col <= worksheet.Dimension.End.Column; col++)
    {
        var originalHeaderText = worksheet.Cells[headerRow, col].Text.Trim();
        string modifiedHeaderText = originalHeaderText;

        // Apply renaming based on the occurrence count of specific headers.
        switch (originalHeaderText)
        {
            case "AP":
                modifiedHeaderText = (++apCount == 1) ? "LongTermAsk" : "NearTermAsk";
                break;
            case "EL":
                modifiedHeaderText = (++elCount == 1) ? "LongTermEL" : "NearTermEL";
                break;
            case "Bid":
                modifiedHeaderText = (++bidCount == 1) ? "BidSpread" : "BidPrice";
                break;
            case "Offer":
                modifiedHeaderText = (++offerCount == 1) ? "OfferSpread" : "OfferPrice";
                break;
        }

        dataTable.Columns.Add(modifiedHeaderText);
        columnNames[worksheet.Cells[headerRow, col].Address] = modifiedHeaderText; // Map original column address to the new header name.
    }

    // Process rows starting from dataStartRow.
    for (int row = dataStartRow; row <= worksheet.Dimension.End.Row; row++)
    {
        var dataRow = dataTable.NewRow();
        dataRow["QuoteDate"] = quoteDate; // Set the QuoteDate for each row.

        // Populate the data row based on the original column addresses and the modified header names.
        for (int col = startColumn; col <= worksheet.Dimension.End.Column; col++)
        {
            var cellAddress = worksheet.Cells[row, col].Address;
            var cellValue = worksheet.Cells[row, col].Text.Trim();

            // Only add cell data if the column was intended to be included (i.e., has a mapped modified header name).
            if (columnNames.ContainsKey(worksheet.Cells[headerRow, col].Address))
            {
                string modifiedHeaderName = columnNames[worksheet.Cells[headerRow, col].Address];
                dataRow[modifiedHeaderName] = cellValue;
            }
        }

        dataTable.Rows.Add(dataRow);
    }

    // The dataTable now should have correctly aligned data under the dynamically renamed headers.
}









    private void ProcessSwissFile(ExcelWorksheet worksheet)
    {
        // Adapted Swiss processing logic from the original code
        int startRow = 13; // Example for 'Swiss', skipping 12 rows as per original logic
        dataTable = worksheet.Cells[startRow, 3, worksheet.Dimension.End.Row, worksheet.Dimension.End.Column].ToDataTable(options =>
        {
            options.FirstRowIsColumnNames = true;
            // Implement additional logic as needed to skip empty columns and fill every entry of Quote Date with the value from the file name
        });
        // Fill QuoteDate for every entry as needed
    }
}



Issue	ID#		Ticker		($MM)	Date	Maturity		Regions/Perils	AP	EL	AP	EL		S&P	M	F	Coupon	Bid	Offer	Bid	Offer	Occurrence
Acorn Re 2021-1	00485YAC3		ACORNR		475.00	10/29/2021	5/7/2025		US, Can, Mex	1.20	0.89							MM + 250	419	324	97.65	98.97	Occurrence



These are how the columns should align.


QUOTEDATE	ISSUE	ID#	TICKER	($MM)	DATE	MATURITY	REGIONS/PERILS	LONGTERMASK	LONGTERMEL	NEARTERMASK	NEARTERMEL	S&P	M	F	COUPON	BIDSPREAD	OFFERSPREAD	BIDPRICE	OFFERPRICE	OCCURRENCE
2024-01-19	Acorn Re 2021-1	00485YAC3		ACORNR		475.00	10/29/2021	5/7/2025		US, Can, Mex	1.20	0.89							MM + 250	367
