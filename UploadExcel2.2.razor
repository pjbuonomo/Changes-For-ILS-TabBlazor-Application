@page "/excel-upload"
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml
@using System.Data
@using System.IO
@using System.Linq
@using System.Text.RegularExpressions

<div>
    <InputFile OnChange="HandleFileSelected" multiple />
    @if (!string.IsNullOrEmpty(fileTypeMessage))
    {
        <div class="mt-2">@fileTypeMessage</div>
    }
</div>

@if (dataTable != null)
{
    <div class="card">
        <table class="table mt-3">
            <thead>
                <tr>
                    @foreach (DataColumn col in dataTable.Columns)
                    {
                        <th>@col.ColumnName</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (DataRow row in dataTable.Rows)
                {
                    <tr>
                        @foreach (var cell in row.ItemArray)
                        {
                            <td>@cell</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private DataTable? dataTable;
    private string fileTypeMessage = string.Empty;
    private string fileType = string.Empty;
    private string quoteDate = string.Empty;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            var fileName = file.Name;
            IdentifyFileTypeAndQuoteDate(fileName);

            if (!string.IsNullOrEmpty(fileType))
            {
                fileTypeMessage = $"File Type Identified: {fileType}";
                var fileStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(fileStream);
                await ProcessFile(fileStream, fileName);
                break; // Assuming one file processing at a time for simplicity
            }
        }
    }

    private void IdentifyFileTypeAndQuoteDate(string fileName)
    {
        if (Regex.IsMatch(fileName, "RLS|ILW", RegexOptions.IgnoreCase))
        {
            fileType = "AON";
            var match = Regex.Match(fileName, @"\d{4}-\d{2}-\d{2}");
            if (match.Success) quoteDate = match.Value;
        }
        else if (fileName.Contains("ILS pricing data", StringComparison.OrdinalIgnoreCase))
        {
            fileType = "Swiss";
            var match = Regex.Match(fileName, @"\d{8}");
            if (match.Success) quoteDate = $"{match.Value.Substring(0, 4)}-{match.Value.Substring(4, 2)}-{match.Value.Substring(6, 2)}";
        }
        else
        {
            fileType = string.Empty;
            quoteDate = string.Empty;
        }
    }

    private void ProcessAonFile(ExcelWorksheet worksheet, string fileName)
{
    dataTable = new DataTable();

    // Extract QuoteDate from fileName using Regex assuming format "YYYY-MM-DD"
    var dateMatch = Regex.Match(fileName, @"\d{4}-\d{2}-\d{2}");
    string quoteDate = dateMatch.Success ? dateMatch.Value : "Unknown Date";

    // Add "QuoteDate" column first
    dataTable.Columns.Add("QuoteDate", typeof(string));

    var headerRow = 4; // Headers are in row 4.
    var dataStartRow = 6; // Data starts from row 6.
    var startColumn = 3; // Data starts from column 3, skipping the first 2 columns.

    // Initialize counters for renaming specific headers based on their occurrences.
    int apCount = 0, elCount = 0, bidCount = 0, offerCount = 0;
    List<int> validColumnIndices = new List<int>();

    // Add columns to dataTable based on non-blank headers present in the Excel sheet.
    for (int col = startColumn; col <= worksheet.Dimension.End.Column; col++)
    {
        var headerText = worksheet.Cells[headerRow, col].Text.Trim();
        if (!string.IsNullOrEmpty(headerText))
        {
            switch (headerText)
            {
                case "AP":
                    headerText = (++apCount == 1) ? "LongTermAsk" : "NearTermAsk";
                    break;
                case "EL":
                    headerText = (++elCount == 1) ? "LongTermEL" : "NearTermEL";
                    break;
                case "Bid":
                    headerText = (++bidCount == 1) ? "BidSpread" : "BidPrice";
                    break;
                case "Offer":
                    headerText = (++offerCount == 1) ? "OfferSpread" : "OfferPrice";
                    break;
            }
            dataTable.Columns.Add(headerText);
            validColumnIndices.Add(col);
        }
    }

    // Process each row of data, considering only columns with valid headers.
    for (int row = dataStartRow; row <= worksheet.Dimension.End.Row; row++)
    {
        // Skip row if the value in Column C is blank.
        if (string.IsNullOrWhiteSpace(worksheet.Cells[row, 3].Text))
        {
            continue;
        }

        var dataRow = dataTable.NewRow();
        dataRow["QuoteDate"] = quoteDate; // Populate QuoteDate for each row.

        // Populate the data row based on valid column indices.
        for (int i = 0, dataTableCol = 1; i < validColumnIndices.Count; i++, dataTableCol++)
        {
            int excelColIndex = validColumnIndices[i];
            var cellValue = worksheet.Cells[row, excelColIndex].Text.Trim();
            dataRow[dataTableCol] = cellValue; // Populate data starting from the second column since the first is "QuoteDate".
        }

        dataTable.Rows.Add(dataRow);
    }
}

    private void ProcessSwissFile(ExcelWorksheet worksheet)
    {
        // Adapted Swiss processing logic from the original code
        int startRow = 13; // Example for 'Swiss', skipping 12 rows as per original logic
        dataTable = worksheet.Cells[startRow, 3, worksheet.Dimension.End.Row, worksheet.Dimension.End.Column].ToDataTable(options =>
        {
            options.FirstRowIsColumnNames = true;
            // Implement additional logic as needed to skip empty columns and fill every entry of Quote Date with the value from the file name
        });
        // Fill QuoteDate for every entry as needed
    }
}
