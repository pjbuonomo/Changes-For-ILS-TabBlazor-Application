@page "/excel-upload"
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml
@using System.Data
@using System.IO

<select @bind="selectedOption">
    <option value="">Please select...</option>
    <option value="Swiss">Swiss</option>
    <option value="Aon">Aon</option>
    <option value="BH">BH</option>
</select>

<InputFile OnChange="HandleFileUpload" disabled="@string.IsNullOrEmpty(selectedOption)" />
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    private string selectedOption = "";
    private string errorMessage = "";

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(selectedOption))
        {
            errorMessage = "Please select an appropriate format before uploading.";
            return;
        }

        var file = e.File;
        if (file != null)
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);
            stream.Position = 0;

            using var package = new ExcelPackage(stream);
            var worksheet = package.Workbook.Worksheets[0];

            DataTable dataTable;
            try
            {
                if (selectedOption == "Swiss")
                {
                    // For the "Swiss" option, you might adjust the reading logic here, for example:
                    dataTable = ReadWorksheetToDataTable(worksheet, 12); // Custom method to handle specifics
                }
                else
                {
                    // Default reading without skipping rows
                    dataTable = ReadWorksheetToDataTable(worksheet);
                }

                // Process dataTable as needed...

                errorMessage = "";
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred: {ex.Message}";
            }
        }
    }

    private DataTable ReadWorksheetToDataTable(ExcelWorksheet worksheet, int skipRows = 0)
    {
        DataTable table = new DataTable();
        foreach (var firstRowCell in worksheet.Cells[1 + skipRows, 1, 1 + skipRows, worksheet.Dimension.End.Column])
        {
            table.Columns.Add(firstRowCell.Text);
        }

        for (var rowNumber = 2 + skipRows; rowNumber <= worksheet.Dimension.End.Row; rowNumber++)
        {
            var row = worksheet.Cells[rowNumber, 1, rowNumber, worksheet.Dimension.End.Column];
            var newRow = table.NewRow();
            foreach (var cell in row)
            {
                newRow[cell.Start.Column - 1] = cell.Text;
            }
            table.Rows.Add(newRow);
        }

        return table;
    }
}
