@page "/excel-upload"
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml
@using System.Data
@using System.IO
@using System.Linq
<TabBlazor.PageMainTitle>Dashboard Test</TabBlazor.PageMainTitle>
<PagePretitle>
    Blazor
    <Icon class="align-text-top" IconType="@TablerIcons.Heart" TextColor="TablerColor.Red" Size="12" Filled=true />
    <a style="text-decoration: unset; color: unset;" href="https://tabler.io/" target="_blank">Tabler</a>
</PagePretitle>

<div class="row justify-content-center">
        <div class="mb-3">
            <label for="processingOption" class="form-label">Select Processing Option:</label>
            <InputSelect id="processingOption" @bind-Value="selectedOption">
                <option value="">Select an option</option>
                <option value="Swiss">Swiss</option>
                <option value="Aon">Aon</option>
                <option value="BH">BH</option>
            </InputSelect>
        </div>
        <div>
            <InputFile OnChange="HandleFileSelected" disabled="@string.IsNullOrEmpty(selectedOption)" />
            @if (fileStream != null)
            {
                <button class="btn btn-primary mt-2" @onclick="ProcessFile">Process</button>
            }
        </div>
</div>

@if (dataTable == null)
{
    <div class="mt-1 container-xl">
        <div class="card">
            <div class="card-header">
                <div>
                      <div class="row align-items-center">
                        <div class="col-auto">
                          <Icon IconType="MDIcons.Microsoft_excel" Color="#1D6F42" />
                        </div>
                        <div class="col">
                          <div class="card-title">Example File Name</div>
                          <div class="card-subtitle">Example Upload Type</div>
                        </div>
                      </div>
                    </div>
                <div class="card-actions btn-actions">
                    <a href="#" class="btn btn-primary"><Icon IconType="MDIcons.Upload"/></a>
                    <div class="dropdown">
                        <a href="" class="btn-action dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><!-- Download SVG icon from http://tabler-icons.io/i/dots-vertical -->
                          <Icon IconType="MDIcons.Dots_vertical" Color="#667382" />
                        </a>
                        <div class="dropdown-menu dropdown-menu-end" style="">
                          <a class="dropdown-item" href="#">Preview Data</a>
                          <a class="dropdown-item text-danger" href="#">Delete</a>
                        </div>
                      </div>
            </div>
    </div>
                    <div class="card-body">
                    <div class="table-responsive" style="height: 500px">
                        <table class="table card-table table-vcenter text-nowrap datatable">

                        </table>
                    </div>
                </div
    </div>
    </div>


}

@if (dataTable != null)
{
    <div class="mt-1 container-xl">
        <div class="card">
                <div class="card-body">
                    <div class="table-responsive" style="max-height: 500px">
                    <table class="table card-table table-vcenter text-nowrap datatable">
                        <thead>
                            <tr>
                                @foreach (DataColumn col in dataTable.Columns)
                                {
                                    <th>@col.ColumnName</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (DataRow row in dataTable.Rows)
                            {
                                <tr>
                                    @foreach (var cell in row.ItemArray)
                                    {
                                        <td>@cell</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                    </div>
                </div
        </div>
    </div>
}

@code {
    private string selectedOption = string.Empty;
    private DataTable? dataTable;
    private MemoryStream? fileStream;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && Path.GetExtension(file.Name).Equals(".xlsx", StringComparison.OrdinalIgnoreCase))
        {
            fileStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(fileStream);
        }
        else
        {
            fileStream = null; // Ensure fileStream is null if no or invalid file is selected
        }
    }

    private async Task ProcessFile()
    {
        if (fileStream != null && !string.IsNullOrEmpty(selectedOption))
        {
            fileStream.Position = 0; // Reset stream position to beginning
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set according to your use case
            using var package = new ExcelPackage(fileStream);
            var worksheet = package.Workbook.Worksheets[0]; // Assuming data is in the first worksheet

            // Adjust processing based on the selected option
            int startRow = selectedOption == "Swiss" ? 13 : 1; // Example for 'Swiss', skipping 12 rows
            dataTable = worksheet.Cells[startRow, 1, worksheet.Dimension.End.Row, worksheet.Dimension.End.Column].ToDataTable(options =>
            {
                options.FirstRowIsColumnNames = true;
            });

            fileStream.Dispose(); // Clean up the MemoryStream
            fileStream = null; // Reset the stream reference to null after processing
        }
    }
}
