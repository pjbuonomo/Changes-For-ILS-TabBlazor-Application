TYPE: AON




File Name: 2023-12-08 RLS & ILW Data.xlsx
Identified by noting that "RLS" or "ILW" is in the file name.

QuoteDate found to be 2023-12-08 from the file name.

Rules for parsing Excel:

Target sheet named RLS
There are a lot of blank rows that separate rows with data.




Skip over rows 1 through 3.
Columns 1 and 2 can be ignored/removed/skipped.
Row 4 contains the headers
If a column in row 4 is empty than that column should be skipped from then on when parsing the rest of the Excel.
Only columns with headers should be parsed for data.

The SQL data that corresponds to each column header.

EVERY ENTRY FOR QUOTE DATE should be filled with the value of the date found in the file name Ex. "2023-12-08"

"Furthermore here is the R logic that is used to parse the Excel file normally after cleaning."
library(dplyr)
library(DBI)
library(RODBC)
library(readr)
library(readxl)

db_conn <- odbcConnect("ILS")

#################################################################################################################

#FILE NEEDS TO BE CLEANED BEFORE USE
table <- read_excel("S:/Touchstone/Catrader/Boston/Database/CatBond/Shiny/Aon_Weekly/Aon20240119Clean.xlsx", sheet = 'RLS', col_names=T, skip=1) %>%
		data.frame()

#DATE NEEDS TO BE MANUALLY CHANGED
QDate <- rep(as.Date("2024-01-19"), times=nrow(table))
table <-cbind(QDate, table)

table <- table %>%
		select(-4,-13,-14,-15)

ColNames <- sqlColumns(db_conn, "Aon") %>% 
			select('COLUMN_NAME')

colnames(table) <- ColNames$COLUMN_NAME

table$LongTermAsk[is.na(table$LongTermAsk)] <- 0
table$LongTermEL[is.na(table$LongTermEL)] <- 0
table$NearTermAsk[is.na(table$NearTermAsk)] <- 0
table$NearTermEL[is.na(table$NearTermEL)] <- 0
table$BidSpread[table$BidSpread == 'n/a'] <- 0
table$OfferSpread[table$OfferSpread == 'n/a'] <- 0

table$Coupon <- table$Coupon %>% parse_number() %>% as.integer()
table$BidPrice <- table$BidPrice %>% parse_number()
table$OfferPrice <- table$OfferPrice %>% parse_number()

table$Size <- formatC(c(table$Size), digits = 2, format = 'f')
table$LongTermAsk <- formatC(c(table$LongTermAsk), digits = 2, format = 'f')
table$LongTermEL <- formatC(c(table$LongTermEL), digits = 2, format = 'f')
table$NearTermAsk <- formatC(c(table$NearTermAsk), digits = 2, format = 'f')
table$NearTermEL <- formatC(c(table$NearTermEL), digits = 2, format = 'f')
table$Coupon <- formatC(c(table$Coupon), digits = 2, format = 'f')
table$BidPrice <- formatC(c(table$BidPrice), digits = 2, format = 'f')
table$OfferPrice <- formatC(c(table$OfferPrice), digits = 2, format = 'f')




sqlSave(db_conn, table, tablename="Aon", rownames=F, append=T, fast=F)

##################################################################################################################################

odbcClose(db_conn)

##################################################################################################################################


However this code assumes the file has been "cleaned" and blank rows/files have been deleted and etc.

------------
TYPE: 
File BHcatpricing20231208.xlsx
Identified by file name containing "BH"
QuoteDate is derived from the file name. Ex. BHcatpricing20231208 -> 20231208 -> 2023-12-08
Parsing rules: Row 2 is where the headers reside.
Skip Row 1
Delete and skip row 3
If there is any row where a cell in Column C is empty, then skip that row and do not document the data


Here is the old R code that was used to parse it after cleaning.

library(dplyr)
library(DBI)
library(RODBC)
library(readr)
library(readxl)

db_conn <- odbcConnect("ILS")

#################################################################################################################

#SPREADSHEET NEEDS TO BE MANUALLY CLEANED BEFORE THIS SCRIPT IS RUN
table <- read_excel("S:/Touchstone/Catrader/Boston/Database/CatBond/Shiny/BH_Weekly/BH20231229Clean.xlsx", col_names=T, skip=1) %>%
		na.omit() %>%
		data.frame()

#Add date to front of table (Needs to be manually edited)
Date <- rep(as.Date("2023-12-29"), times=nrow(table))
table <-cbind(Date, table)

ColNames <- sqlColumns(db_conn, "BH") %>% 
			select('COLUMN_NAME')

result <- table %>%
		select(-15)

colnames(result) <- ColNames$COLUMN_NAME

#Limit fields to 2 decimal places
result$EL <- formatC(c(result$EL), digits = 2, format = 'f')
result$Margin <- formatC(c(result$Margin), digits = 2, format = 'f')
result$Coupon <- formatC(c(result$Coupon), digits = 2, format = 'f')
result$BidPrice <- formatC(c(result$BidPrice), digits = 2, format = 'f')
result$BidDiscountMargin <- formatC(c(result$BidDiscountMargin), digits = 2, format = 'f')
result$OfferPrice <- formatC(c(result$OfferPrice), digits = 2, format = 'f')
result$OfferDiscountMargin <- formatC(c(result$OfferDiscountMargin), digits = 2, format = 'f')
result$Size <- formatC(c(result$Size), digits = 2, format = 'f')

sqlSave(db_conn, result, tablename="BH", rownames=F, append=T, verbose = TRUE)

##################################################################################################################################

odbcClose(db_conn)

##################################################################################################################################

------------
TYPE: GCS
File Name: GCS20231229.xlsx

QuoteDate = 2023-12-29
Column headers are found in row 6.
Data starts in row 7
The sheet that needs reading is the only other sheet in the file. The sheet is not called "Disclaimer".



library(dplyr)
library(DBI)
library(RODBC)
library(readr)
library(readxl)

db_conn <- odbcConnect("ILS")

#################################################################################################################

table <- read_excel("S:/Touchstone/Catrader/Boston/Database/CatBond/Shiny/GCS_Weekly/GCS20231229.xlsx", sheet = 2, col_names=F, skip=6) %>%
		data.frame()

#Add date to front of table (Needs to be manually edited)
Date <- rep(as.Date("2023-12-29"), times=nrow(table))
table <-cbind(Date, table)

ColNames <- sqlColumns(db_conn, "GCS") %>% 
			select('COLUMN_NAME')

colnames(table) <- ColNames$COLUMN_NAME

#Limit BidSpread and OfferSpread to 2 decimal places and convert any N/A values to 0
table$BidSpread[is.na(table$BidSpread)] <- 0
table$OfferSpread[is.na(table$OfferSpread)] <- 0
table$BidSpread <- formatC(c(table$BidSpread), digits = 2, format = 'f')
table$OfferSpread <- formatC(c(table$OfferSpread), digits = 2, format = 'f')

sqlSave(db_conn, table, tablename="GCS", rownames=F, append=T, fast=F)

##################################################################################################################################

odbcClose(db_conn)

##################################################################################################################################

------------
TYPE: RBC
File Name: RBC20231215.xlsx

LOGIC TO BE ADDED LATER
------------
TYPE: Swiss
File Name: ILS pricing data 20240119.xlsx

QuoteDate derived from file name to be 2024-01-19

Swiss processing logic is already included.



------------

The goal should be to automatically generate the value for the QuoteDate field based on the rules I told you. However it should prompt the user with a modal that asks the user to input the Quote Date which will be autopopulated with the derived QuoteDate however it gives the user that option to modify it if needed.

Please let me know if you need me to clarify anything.
